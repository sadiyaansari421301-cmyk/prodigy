#Password Complexity Checker
import re

def assess_password_strength(password):
    """
    Assesses the strength of a password based on length, character types,
    and provides feedback for improvement.
    """
    score = 0
    feedback = []

    # Criteria 1: Length
    if len(password) >= 12:
        score += 2
        feedback.append("Password length is good.")
    elif len(password) >= 8:
        score += 1
        feedback.append("Consider increasing password length for better security.")
    else:
        feedback.append("Password is too short. Aim for at least 8 characters, preferably 12+.")

    # Criteria 2: Uppercase letters
    if re.search(r"[A-Z]", password):
        score += 1
    else:
        feedback.append("Include uppercase letters for stronger security.")

    # Criteria 3: Lowercase letters
    if re.search(r"[a-z]", password):
        score += 1
    else:
        feedback.append("Include lowercase letters for stronger security.")

    # Criteria 4: Numbers
    if re.search(r"\d", password):
        score += 1
    else:
        feedback.append("Include numbers to enhance password strength.")

    # Criteria 5: Special characters
    if re.search(r"[!@#$%^&*()_+\-=\[\]{};':\"\\|,.<>/?]", password):
        score += 1
    else:
        feedback.append("Include special characters (e.g., !@#$) for maximum security.")

    # Determine overall strength
    if score >= 6:
        strength = "Very Strong"
    elif score >= 4:
        strength = "Strong"
    elif score >= 2:
        strength = "Moderate"
    else:
        strength = "Weak"

    return strength, feedback

# Example Usage
if _name_ == "_main_":
    password = input("Enter your password: ")
    strength, feedback = assess_password_strength(password)

    print(f"\nPassword Strength: {strength}")
    print("Feedback:")
    for item in feedback:
        print(f"- {item}")
